{"version":3,"sources":["App.jsx","index.js"],"names":["App","state","number","message","messageColor","getRandomNumber","randomNumber","Math","floor","random","setState","onInputChange","event","target","value","getResult","Number","isNaN","setMessage","maxLimit","sqrt","i","color","this","randomIcon","Icon","name","className","Header","as","content","Input","placeholder","label","onChange","Button","icon","onClick","inverted","size","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qVAIqBA,G,mNACnBC,MAAQ,CACNC,OAAQ,EACRC,QAAS,GACTC,aAAc,S,EAGhBC,gBAAkB,WAChB,IAAMC,EAAeC,KAAKC,MAAsB,IAAhBD,KAAKE,UACrC,EAAKC,SAAS,CACZR,OAAQI,K,EAIZK,cAAgB,SAAAC,GACd,EAAKF,SAAS,CACZR,OAAQU,EAAMC,OAAOC,S,EAWzBC,UAAY,WACV,IAAMb,EAASc,OAAO,EAAKf,MAAMC,QAEjC,GAAIe,MAAMf,GACR,EAAKgB,WAAW,SAAW,EAAKjB,MAAMC,OAAS,mBAAoB,YAIrE,GAAIA,GAAU,GAAMA,EAAS,GAAKA,EAAS,IAAM,EAC/C,EAAKgB,WAAW,SAAWhB,EAAS,yBAA0B,WADhE,CAOA,IAFA,IAAMiB,EAAWZ,KAAKC,MAAMD,KAAKa,KAAKlB,IAAW,EAExCmB,EAAI,EAAGA,EAAIF,EAAUE,IAC5B,GAAInB,EAASmB,IAAM,EAEjB,YADA,EAAKH,WAAW,SAAWhB,EAAS,yBAA0B,OAKlE,EAAKgB,WAAW,QAAUhB,EAAS,qBAAsB,W,yDA7BhDC,EAASmB,GAClBC,KAAKb,SAAS,CACZP,QAASA,EACTC,aAAekB,M,+BA8BjB,IAAME,EAAa,kBAACC,EAAA,EAAD,CAAMC,KAAK,WAC9B,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CAAQC,GAAG,KAAKC,QAAQ,gCACxB,6BACA,kBAACC,EAAA,EAAD,CACEC,YAAaT,KAAKtB,MAAMC,OACxB+B,MAAM,iBACNC,SAAUX,KAAKZ,gBAEjB,kBAACwB,EAAA,EAAD,CACEC,KAAMZ,EACNG,UAAU,cACVU,QAASd,KAAKlB,kBAEhB,6BACA,kBAAC8B,EAAA,EAAD,CACEL,QAAQ,sBACRH,UAAU,oBACVU,QAASd,KAAKR,UACdO,MAAM,MAAMgB,UAAQ,IACtB,kBAACV,EAAA,EAAD,CACEW,KAAK,SACLjB,MAAOC,KAAKtB,MAAMG,cACjBmB,KAAKtB,MAAME,c,GA7EWqC,IAAMC,YCEvCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.90ac659e.chunk.js","sourcesContent":["import React from 'react';\nimport { Input, Icon, Button, Header } from 'semantic-ui-react';\nimport './App.css';\n\nexport default class App extends React.Component {\n  state = {\n    number: 1,\n    message: '',\n    messageColor: 'black'\n  };\n\n  getRandomNumber = () => {\n    const randomNumber = Math.floor(Math.random() * 1000000);\n    this.setState({\n      number: randomNumber\n    });\n  }\n\n  onInputChange = event => {\n    this.setState({\n      number: event.target.value\n    })\n  }\n\n  setMessage(message, color) {\n    this.setState({\n      message: message,\n      messageColor : color\n    });\n  }\n\n  getResult = () => {\n    const number = Number(this.state.number);\n    \n    if (isNaN(number)) {\n      this.setMessage('Nope, ' + this.state.number + ' is not a number', 'red');\n      return;\n    }\n\n    if (number <= 1 || (number > 2 && number % 2 === 0)) {\n      this.setMessage('Nope, ' + number + ' is not a prime number', 'red');\n      return;\n    }\n\n    const maxLimit = Math.floor(Math.sqrt(number)) + 1;\n\n    for (let i = 3; i < maxLimit; i++) {\n      if (number % i === 0) {\n        this.setMessage('Well, ' + number + ' is not a prime number', 'red');\n        return;\n      }\n    }\n\n    this.setMessage('Yes, ' + number + ' is a prime number', 'green');\n  }\n\n  render() {\n    const randomIcon = <Icon name='random' />\n    return(\n      <div className='app'>\n        <Header as='h1' content='Prime Number Identification' />\n        <br/>\n        <Input \n          placeholder={this.state.number}\n          label='Enter a number'\n          onChange={this.onInputChange}\n        />\n        <Button \n          icon={randomIcon} \n          className='random-icon'\n          onClick={this.getRandomNumber}\n        />\n        <br/>\n        <Button \n          content=\"Check If It's Prime\" \n          className=\"checkprime-button\"\n          onClick={this.getResult}\n          color='red' inverted />\n        <Header \n          size='medium' \n          color={this.state.messageColor}>\n          {this.state.message}\n        </Header>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom'; \nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}